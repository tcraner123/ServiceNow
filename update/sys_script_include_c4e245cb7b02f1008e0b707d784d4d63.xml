<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>false</active>
        <api_name>x_xma_xmatters.xMattersUserSync-DEPRECATED</api_name>
        <client_callable>false</client_callable>
        <description>Helper class to manage the user and device sync process.</description>
        <name>xMattersUserSync-DEPRECATED</name>
        <script><![CDATA[gs.include("xMattersLogger");
gs.include("xMattersSOAPHelper");

var xMattersUserSync = Class.create();

xMattersUserSync.prototype = {
  
  initialize : function() {
    this.MAX_SOAP_CALLS_PER_USER  = 7;  
    this.MAX_SOAP_CALLS_PER_PROCESS = 100;

    this.appPrefix = gs.getCurrentScopeName();
    this.soapHelper = new xMattersSOAPHelper();
    this.log = new xMattersLogger( gs.getProperty(this.appPrefix + '.' + "xmatters.logging.level"), 'xMattersUserSync-DEPRECATED' );
    
    this.USER_DOES_NOT_EXIST = "UNKNOWN_USER";
    this.USER_ALREADY_EXISTS = /(WEB_LOGIN_IN_USE|TARGET_NAME_IN_USE)/;
    this.FAILED_INCLUDE_EXCLUDE = "FAILED_INCLUDE_EXCLUDE";
    this.USER_OR_MOBILE_GATEWAY_USER_EXCEED_QUOTA_OR_LICENSE = "USER_OR_MOBILE_GATEWAY_USER_EXCEED_QUOTA_OR_LICENSE";
    this.seedOnly = gs.getProperty(this.appPrefix + '.' + "xmatters.user.sync.seed.only").toLowerCase() == "true";
  },
  
  /**
  * Synchronize a list of users.
  * @param usersToSync a list of usernames to sync
  * @return ?
  */
  syncUsers : function( usersToSync ) {
    var start = new Date();
    var id = start.getTime();
      
    this.log.warn(id + ": Worker loading " + usersToSync.length + " users " + (this.log.isDebug() ? usersToSync : "") + " started at " + start);
    
    var ugr = new GlideRecord("sys_user");
    ugr.addEncodedQuery( 'user_nameIN' + usersToSync.join() );
    ugr.orderBy('user_name');
    ugr.query();
  
    var userCount = 0, syncedUsers = [];
    while (ugr.next()) {
      this.log.debug(id+": Loading user " + ugr.user_name + "...");
    
      var syncd = this.syncUser(ugr, ugr.user_name, "UpdateUser", gs.getProperty(this.appPrefix + '.' + "xmatters.user.sync.delete.non.matching.users"), true);
    
      if (syncd == "true") {
        this.syncDevices(ugr);
      } else if (syncd == this.USER_OR_MOBILE_GATEWAY_USER_EXCEED_QUOTA_OR_LICENSE) {
      this.log.error("User Sync has finished as " + this.USER_OR_MOBILE_GATEWAY_USER_EXCEED_QUOTA_OR_LICENSE + " has occurred. SOAP calls: " + this.soapHelper.soapCallCount);
        break;
      }
    
      userCount++; 
      if (this.log.isDebug()) syncedUsers.push(ugr.user_name.toString());
      
      if (this.MAX_SOAP_CALLS_PER_PROCESS - this.soapHelper.soapCallCount < this.MAX_SOAP_CALLS_PER_USER) {
        // do the rest of the work in a different process
        var moreUsersToSync = [];
        while (ugr.next()) {
          moreUsersToSync.push(ugr.user_name.toString());
        }
        if (moreUsersToSync.length > 0) {
          if (this.log.isDebug()) {
          this.log.warn(id+': Worker is close to SOAP calls quota and will sync ' + moreUsersToSync.length + ' users: ' + moreUsersToSync + ' in a separate process');
        }
          this.syncUsersAsync(moreUsersToSync);
        }   
        break;
      }
    }
    
    this.log.warn(id+": Worker completed syncing " + userCount + " of " + usersToSync.length + " users " + (this.log.isDebug() ? syncedUsers : "") + " at "+ (new Date())+ ". Time elapsed: " + (new Date().getTime() - start.getTime()) + " ms. SOAP calls: " + this.soapHelper.soapCallCount);
  },

  /**
  * Synchronize a list of users in a separate worker process.
  * @param usersToSync a list of usernames to sync
  * @return nothing
  */
  syncUsersAsync : function( usersToSync ) {
    var worker = new GlideScriptedHierarchicalWorker();
    // This is the name of the worker in the sys_progress_worker table.
    worker.setProgressName("User Sync Worker");
    
    // Instantiate the ScriptInclude and indicate which method to fire
    // The parameters are passed in order, not by name, so the first
    // value of that putMethodArg is not used. 
    worker.setScriptIncludeName( this.appPrefix + '.' + "xMattersUserSync-DEPRECATED");
    worker.setScriptIncludeMethod( "syncUsers" );
    worker.putMethodArg("list", usersToSync );
    
    worker.setBackground(true);
    worker.start(); 
      
    return worker.getProgressID();
  },
	
  /**
  * Synchronize the user with xMatters
  * @param record the current user record
  * @param userName name of the user being modified
  * @param triggerRule String defining the action to take
  * @param deleteIfNotIncluded If the user is not included in the include/exclude list we should remove them from xMatters if they exist
  * @return true if the user was not removed via the include/explude rules, false if removed
  */
  syncUser : function(record, userName, triggerRule, deleteIfNotIncluded, ignoreIncludeExcludeList) {
        
    if(ignoreIncludeExcludeList || this.soapHelper.checkIncludeExcludeList("User", record.user_name, gs.getProperty(this.appPrefix + '.' + "xmatters.user.sync.include.exclude.list"), gs.getProperty(this.appPrefix + '.' + "xmatters.user.sync.exclude.list.boolean"), "", triggerRule)) {
      var error; // used to return errors created while calling syncUser
      if (this.seedOnly) {
        error = this.seedOnlyUser(record);
      }
      else if (triggerRule == "AddUser") {
        error = this.addUser(record);
      }
      else if (triggerRule == "UpdateUser") {
        error = this.updateUser(record, userName);
      }
      else {
        error = this.deleteUser(userName);
      }
      if (error == null) {
        return "true";
      } else if (error == "") { // no errors and syncing of the devices is not necessary
    return "false";
    } else {
        this.log.error("Failed to Sync User " + record.user_name + ": " + error);
        return ''+ error;
      }
    } else {
      // The user does not match the sync list
      // Check to see if they exist in xMatters, if so delete the user
      if ((triggerRule == "UpdateUser" || triggerRule == "AddUser") && (deleteIfNotIncluded == null || deleteIfNotIncluded == "true") && !this.seedOnly && this.soapHelper.checkIfUserExistsInXmatters(userName)) {
        this.log.debug("User " + userName + " did not match the synchornization list but they exist in xMatters and will be deleted.");
        this.deleteUser(userName);
        return "FAILED_INCLUDE_EXCLUDE and deleted from xMatters";
      }
      return "FAILED_INCLUDE_EXCLUDE";
    }
  },
  
  /**
  * Synchronize the user with xMatters
  * @param record the current user record
  * @param userName name of the user being modified
  * @param triggerRule String defining the action to take
  * @param deleteIfNotIncluded If the user is not included in the include/exclude list we should remove them from xMatters if they exist
  * @return true if the user was not removed via the include/explude rules, false if removed
  */
  syncUserAndDevices : function(record, userName, triggerRule, deleteIfNotIncluded) {
    var syncd = this.syncUser(record, userName, triggerRule, deleteIfNotIncluded);  
    if (syncd == "true") {
      this.syncDevices(ugr);
    } 
  },
  /**
  * Seed the user with xMatters
  * @param record the current user record
  * Never returns 'true', therefore syncDevices is not called for these users
  */
  seedOnlyUser : function(record) {
    this.log.debug("About to seed user: " + record.user_name);    
    try {
      this.soapHelper.sendAddUserSOAPMessage(record);
      
      this.addDevice(record, gs.getProperty(this.appPrefix + '.' + "xmatters.user.sync.email.device.name"), "Email", record.email);
      this.addDevice(record, gs.getProperty(this.appPrefix + '.' + "xmatters.user.sync.work.phone.device.name"), "Phone", record.phone);
      this.addDevice(record, gs.getProperty(this.appPrefix + '.' + "xmatters.user.sync.mobile.phone.device.name"), "Phone", record.mobile_phone);
      this.addDevice(record, gs.getProperty(this.appPrefix + '.' + "xmatters.user.sync.sms.device.name"), "SMS", record.mobile_phone);
      
      return ''; // do not return null, as we don't want to sync the devices in this case
    }
    catch (e) {
      if (this.USER_ALREADY_EXISTS.test(e)) {
        this.log.info("Failed to seed user " + record.user_name + " because it already exists: " + e);
        return ''; // not en error, do not return null, as we don't want to sync the devices in this case
      } else {
        this.log.warn("Failed to seed user " + record.user_name + ": " + e);
        return '' + e;
      }
    }
  },
  
  /**
  * Add the user to xMatters
  * @param record the current user record
  */
  addUser : function(record) {
    try {
      this.log.debug("About to add user: " + record.user_name);
      this.soapHelper.sendAddUserSOAPMessage(record);
      this.addDevice(record, gs.getProperty(this.appPrefix + '.' + "xmatters.user.sync.email.device.name"), "Email", record.email);
      this.addDevice(record, gs.getProperty(this.appPrefix + '.' + "xmatters.user.sync.work.phone.device.name"), "Phone", record.phone);
      this.addDevice(record, gs.getProperty(this.appPrefix + '.' + "xmatters.user.sync.mobile.phone.device.name"), "Phone", record.mobile_phone);
      this.addDevice(record, gs.getProperty(this.appPrefix + '.' + "xmatters.user.sync.sms.device.name"), "SMS", record.mobile_phone);
    return ''; // do not return null, as we don't want to sync the devices in this case
    } catch (e) {
      this.log.debug( 'Error thrown: ' + e );
      
      if (this.USER_ALREADY_EXISTS.test(e)) {
        this.log.warn(record.user_name + " already exists. Attempting to UPDATE");
        try {
          this.soapHelper.sendUpdateUserSOAPMessage(record, record.user_name);
          return null; // sync devices
        } catch (e2) {
          this.log.error("Failed to Update User " + record.user_name + ": " + e2 + ': ' + e2.message );
          return '' + e2;
        }
      } else {
        this.log.error("Failed to Add User " + record.user_name + ": " + e);
        return '' + e;
      }
    }
  },
  
  /**
  * Update the user in xMatters
  * @param record the current user record
  * @param previousUserName username the user had prior to the update
  */
  updateUser : function(record, previousUserName) {
    try {
      this.log.debug("About to update user: " + previousUserName);
      this.soapHelper.sendUpdateUserSOAPMessage(record, previousUserName);
    } catch (e) {
      this.log.debug( 'updateUser: ERROR: ' + e );
      
      if (e == this.USER_DOES_NOT_EXIST) {
        this.log.warn(previousUserName + " does not exist. Attempting to ADD");
        try {
          var status = this.soapHelper.sendAddUserSOAPMessage(record);
          
          this.addDevice(record, gs.getProperty(this.appPrefix + '.' + "xmatters.user.sync.email.device.name"), "Email", record.email);
          this.addDevice(record, gs.getProperty(this.appPrefix + '.' + "xmatters.user.sync.work.phone.device.name"), "Phone", record.phone);
          this.addDevice(record, gs.getProperty(this.appPrefix + '.' + "xmatters.user.sync.mobile.phone.device.name"), "Phone", record.mobile_phone);
          this.addDevice(record, gs.getProperty(this.appPrefix + '.' + "xmatters.user.sync.sms.device.name"), "SMS", record.mobile_phone);
          
          return ''; // suppress syncDevices
        } catch (e2) {
          this.log.error("Failed to Update User " + record.user_name + ": " + e2 + ': ' + e2.message );
          return '' + e2;
        }
      } else {
        this.log.warn("Failed to Update User " + record.user_name + ": " + e);
        return '' + e;
      }
    }
  },
  
  /**
  * Delete the user in xMatters
  * @param userName name of the user to delete
  */
  deleteUser : function(userName) {
    if (gs.getProperty( this.appPrefix + '.' + "xmatters.user.sync.seed.only").toLowerCase() == "false") {
      try {
        this.log.debug("Sending Delete User: " + userName);
        this.soapHelper.sendDeleteUserSOAPMessage(userName);
      }
      catch (e) {
        this.log.error("Failed to Delete User " + userName + ": " + e + ': ' + e.message );
      }
    }
  },
  
  /**
  * Synchronize the user devices with xMatters
  * @param record the current user record
  */
  syncDevices : function(record) {
    this.log.debug("Calling syncDevices for user " + record.user_name);
    // only query xMatters for devices if seedOnly is false
    var xMdevices = this.seedOnly ? [] : this.soapHelper.sendQueryDeviceSOAPMessage(record.user_name);
    this.log.debug("User " + record.user_name + " has xMatters devices: " + xMdevices.length + " (seedOnly=" + this.seedOnly + ")");
    
    var devices = {};

    devices[gs.getProperty( this.appPrefix + '.' + "xmatters.user.sync.email.device.name")] = { 'type' : "Email", 'value' : record.email};
    devices[gs.getProperty( this.appPrefix + '.' + "xmatters.user.sync.work.phone.device.name")] = { 'type' : "Phone", 'value' : record.phone};
    devices[gs.getProperty( this.appPrefix + '.' + "xmatters.user.sync.mobile.phone.device.name")] = { 'type' : "Phone", 'value' : record.mobile_phone};
    devices[gs.getProperty( this.appPrefix + '.' + "xmatters.user.sync.sms.device.name")] = {'type' : "SMS", 'value' : record.mobile_phone};
    
	var devicesForRemoval = []; // xMatters does not allow to remove last default device, so we will do the removal last
	  
    for (var device in devices) {
      this.log.debug("Syncing device " + device + " type=" + devices[device].type + " value=" + devices[device].value);
      // find xMatters info for this device 
      var deviceInfo = null;
      for (var i=0; i < xMdevices.length; i++) {
        if (xMdevices[i].deviceName == device) {
          deviceInfo = xMdevices[i];
          break;
        }
      }
      var value = devices[device].value;
      try {
        if (value == null || ("" + value).trim() == "") {
          // remove device from xMatters if found
          if (deviceInfo != null) { // never true for seedOnly, so no check is required
		    var deviceId = deviceInfo.deviceId;
            this.log.debug("User " + record.user_name + " does not have " + device + " but device exists in xMatters, mark device '" + deviceId +"' for removal");
            devicesForRemoval.push(deviceId);
          } else {
            this.log.debug("User " + record.user_name + " does not have " + device + " and no device exists in xMatters, do nothing.");
          }
        } else if (deviceInfo == null) {
          this.log.debug("User " + record.user_name + " has " + device + " but no device exists in xMatters, add device.");
          this.soapHelper.sendAddDeviceSOAPMessage(record, devices[device].type, device);
        } else {
          // device is configured in both Service Now and xMatters, syncing may be required
          this.soapHelper.sendUpdateDeviceSOAPMessage(record, devices[device].type, deviceInfo.deviceId, device, deviceInfo);
        }
	  } catch (e) {
        this.log.error("Failed to synchronize " + device + " for " + record.user_name + ": " + e+ ': ' + e.message );
	  }
    }
    
	for (var j = 0; j < devicesForRemoval.length; j++) {
	  this.log.debug("User " + record.user_name + ": Delete device with id '"+devicesForRemoval[j]+"'");
      try {
        this.soapHelper.sendDeleteDeviceSOAPMessage(devicesForRemoval[j]);
	  } catch (e2) {
        this.log.error("Failed to delete device with id " + devicesForRemoval[j] + " for " + record.user_name + ": " + e2 + ': ' + e2.message );
      }
	}
    this.log.debug("syncDevices for user " + record.user_name + " completed.");   
  },
  
  /**
  * Synchronize the user device with xMatters
  * @param record the current user record
  * @param deviceName name of the device in xMatters to sync
  * @param deviceType email, phone, or mobile
  * @param deviceValue value to set for the device in xMatters
  */
  syncDevice : function(record, deviceName, deviceType, deviceValue) {
    if (deviceValue != null && deviceValue != "" && this.soapHelper.checkIncludeExcludeList(deviceName + " for", record.user_name, gs.getProperty(this.appPrefix + '.' + "xmatters.user.sync.include.exclude.list"), gs.getProperty(this.appPrefix + '.' + "xmatters.user.sync.exclude.list.boolean"))) {
    
      try {
        var deviceId = this.soapHelper.sendFindDeviceSOAPMessage(record.user_name, deviceName);
        this.log.debug("Looking for device " + deviceName + " if ID: " + deviceId + " is present then it exists in xMatters");
        if (deviceId != null && gs.getProperty(this.appPrefix + '.' + "xmatters.user.sync.seed.only").toLowerCase() == "false") {
          this.log.debug("Sending device update for " + deviceName + " with value " + deviceValue);
          this.soapHelper.sendUpdateDeviceSOAPMessage(record, deviceType, deviceId, deviceName);
        }
        else {
          this.log.debug("Sending device add for " + deviceName + " with value " + deviceValue);
          this.soapHelper.sendAddDeviceSOAPMessage(record, deviceType, deviceName);
        }
      } catch(e) {
        this.log.error("Failed to synchronize " + deviceName + " for " + record.user_name + ": " + e+ ': ' + e.message );
      }
    }
  },
  
  /**
  * Adds the user device to xMatters. Called when known that the device does not exist
  * @param record the current user record
  * @param deviceName name of the device in xMatters to sync
  * @param deviceType email, phone, or mobile
  * @param deviceValue value to set for the device in xMatters
  */
  addDevice : function(record, deviceName, deviceType, deviceValue) {
    if (deviceValue != null && deviceValue != "") {
      this.log.debug("Sending device add for " + deviceName + " with value " + deviceValue);
      this.soapHelper.sendAddDeviceSOAPMessage(record, deviceType, deviceName);
    }
  },
  
  /**
  * Delete the user device in xMatters
  * @param userName name of the user the device belongs to
  * @param deviceName name of the device to delete
  */
  deleteDevice : function(userName, deviceName) {
    var deviceId = this.soapHelper.sendFindDeviceSOAPMessage(userName, deviceName);
    if (deviceId != null && gs.getProperty(this.appPrefix + '.' + "xmatters.user.sync.seed.only").toLowerCase() == "false") {
      this.log.debug("Attempting to delete device " + deviceName);
      this.soapHelper.sendDeleteDeviceSOAPMessage(deviceId);
    }
  }
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2015-02-09 19:57:45</sys_created_on>
        <sys_id>c4e245cb7b02f1008e0b707d784d4d63</sys_id>
        <sys_mod_count>27</sys_mod_count>
        <sys_name>xMattersUserSync-DEPRECATED</sys_name>
        <sys_package display_value="Global" source="global">global</sys_package>
        <sys_policy/>
        <sys_scope display_value="xMatters">5950d7444f2231000e9fa88ca310c78c</sys_scope>
        <sys_update_name>sys_script_include_c4e245cb7b02f1008e0b707d784d4d63</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2016-08-25 22:20:43</sys_updated_on>
    </sys_script_include>
</record_update>
