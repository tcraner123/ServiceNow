<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ui_script">
    <sys_ui_script action="INSERT_OR_UPDATE">
        <active>true</active>
        <description/>
        <global>false</global>
        <name>x_xma_xmatters.xm_mod_config_category</name>
        <script><![CDATA[angular.module( 'xm.config-category', [ 'xm.glide-ajax', 'ui.bootstrap', 'xm.property-factory' ] );
angular.module('xm.config-category').service( 'configCategory', function configCategory( $q, GlideAjax, $uibModal, propertyFactory ) {
	var runningIndex = 0;
	function XMPropertyCategory( title, name, categories ) {
		this.title = title;
		this.name = name;
		this.isLoading = false;
		this.isSaving = false;
		this.subCategories = [];
		this.subCategoriesByName = {};
		this.isCollapsible = false;
		this.isActive = false;
		this.props = [];
		this.hasProps = false;
		this.index = runningIndex;
		this.categories = categories;
		runningIndex += 1;
		return this;
	}

	function XMPropertySubCategory( name ) {
		this.name = name;
		this.isCollapsed = false;
		this.properties = [];
		this.index = runningIndex;
		runningIndex += 1;
		return this;
	}

	XMPropertySubCategory.prototype.toggleCollapse = function() {
		this.isCollapsed = !this.isCollapsed;
	};

	XMPropertySubCategory.prototype.processProperties = function() {
		var runningColumnNumber = 0;
		for( var i = 0; i < this.properties.length; i++ ) {
			var prop = this.properties[i];
			if( prop.columns === 2 ) {
				runningColumnNumber = 0;
			} else if( prop.columns === 1 ) {
				prop.setIsFirstColumn( runningColumnNumber % 2 === 0 );
				runningColumnNumber += 1;
			} else {
				throw 'invalid number of columns: ' + prop.columns;
			}
		}
	};

	XMPropertyCategory.prototype.getOrCreateSubcategory = function( subCategoryName ) {
		var subCategory;
		if( typeof subCategoryName === 'undefined' || subCategoryName === null ) {
			subCategoryName = 'Properties';
		}
		if( this.subCategoriesByName.hasOwnProperty( subCategoryName ) ) {
			subCategory = this.subCategoriesByName[ subCategoryName ];
		} else {
			subCategory = new XMPropertySubCategory( subCategoryName );
			this.subCategoriesByName[ subCategoryName ] = subCategory;
			this.subCategories.push( subCategory );
		}
		return subCategory;
	};

	XMPropertyCategory.prototype.loadProperties = function() {
		var cat = this;
		this.isLoading = true;
		var ga = new GlideAjax( 'xMattersAjaxConfig' );
		ga.addParam( 'sysparm_name', 'getList' );
		ga.addParam( 'category', this.name );
		ga.setScope( 'x_xma_xmatters' );
		ga.send().then( function(response){
			if( response.success ) {
				var sortedProperties = response.properties.sort( function(a,b) {
					return a.order - b.order;
				} );
				for( var i = 0; i < sortedProperties.length; i++ ) {
					var prop = propertyFactory.buildProperty( sortedProperties[i] );
					cat.props.push( prop );
					cat.getOrCreateSubcategory( prop.subCategory ).properties.push( prop );
				}
				cat.isCollapsible = cat.subCategories.length > 1;
				for( var j = 0; j < cat.subCategories.length; j++ ) {
					cat.subCategories[j].processProperties();
				}
				cat.isLoading = false;
				cat.hasProps = true;
			}
		} ).catch( function( e ){
			jslog( e );
		} );
	};

	XMPropertyCategory.prototype.activate = function() {
		this.isActive = true;
		if( !this.hasProps && !this.isLoading ) {
			this.loadProperties();
		}
	};

	XMPropertyCategory.prototype.deactivate = function() {
		this.isActive = false;
		this.resetProperties();
	};

	XMPropertyCategory.prototype.saveProperties = function( form ) {
		this.isSaving = true;
		var propsToUpdate = [];
		for( var i = 0; i < this.props.length; i++ ) {
			var prop = this.props[i];
			if( form[ prop.identifier ] && form[ prop.identifier ].$dirty ) {
				propsToUpdate.push( prop.getUpdatedProperty() );
			}
		}

		if( propsToUpdate.length > 0 ) {
			var cat = this;
			var ga = new GlideAjax( 'xMattersAjaxConfig' );
			ga.addParam( 'sysparm_name', 'updateProperties' );
			ga.addParam( 'updated_properties', JSON.stringify( propsToUpdate ) );
			ga.setScope( 'x_xma_xmatters' );
			ga.send().then( function( response ) {
				if( response.success ) {
					cat.saveLocalProperties();
					form.$setPristine();
				} else {
					jslog( response );
                    jslog( 'A problem occurred while saving' );
				}
				cat.isSaving = false;

			} ).catch( function( e ){
                jslog( e );
                jslog( 'A problem occurred while saving' );
				cat.isSaving = false;
			} );
		} else {
			this.isSaving = false;
            jslog( 'Nothing to save' );
		}
	};

	XMPropertyCategory.prototype.deselect = function( $event, $selectedIndex ) {
		if( typeof $event !== 'undefined' && $event !== null ) {
			$event.preventDefault();
		}

		if( this.form.$dirty ) {
			var cat = this;
			openModal( 'You have unsaved changes. Are you sure you want to switch tabs and lose your progress?', true ).result.then( function(){
                jslog( 'Accepted dialog' );
				cat.deactivate();
				cat.form.$setPristine();
				cat.activateTab( $selectedIndex );
			}, function(){
                jslog( 'Dismissed Dialog' );
			});
		} else {
			this.activateTab( $selectedIndex );
		}
	};

	XMPropertyCategory.prototype.save = function( form ) {
		form.$setSubmitted(true);
		if( form.$pristine ) {
            jslog( 'Nothing to save' );
		} else if( form.$invalid ) {
			openModal( 'Unable to save at this time. Resolve errors then try again.', false ).result.then( function(){
                jslog( 'Accepted dialog' );
			}, function(){
                jslog( 'Dismissed Dialog' );
			});
		} else {
			this.saveProperties( form );
		}
	};

	XMPropertyCategory.prototype.resetProperties = function() {
		for( var i = 0; i < this.props.length; i++ ) {
			this.props[i].resetValue();
		}
	};

	XMPropertyCategory.prototype.saveLocalProperties = function() {
		for( var i = 0; i < this.props.length; i++ ) {
			this.props[i].saveLocalValue();
		}
	};

	var configCategory = {};
	configCategory.getNewCategory = function( title, name, categories ){
		return new XMPropertyCategory( title, name, categories );
	};

	var openModal = function( msg, hasCancel ) {
		return $uibModal.open(
			{
				templateUrl: 'x_xma_xmatters_xm_config_dialog_template.do?sysparm_nostack=true',
				controller: 'ConfigModalCtlr',
				size: 'md',
				resolve: {
					bodyText: function() {
						return msg;
					},
					hasCancel: function() {
						return hasCancel;
					}
				}
			}
		);
	};

	return configCategory;
} );

angular.module('xm.config-category').controller('ConfigModalCtlr', function ($scope, $uibModalInstance, bodyText, hasCancel) {
	$scope.modalText = bodyText;
	$scope.hasCancel = hasCancel;
	$scope.modalOk = function () {
		$uibModalInstance.close();
	};

	$scope.modalCancel = function () {
		$uibModalInstance.dismiss('cancel');
	};
});]]></script>
        <script_name>xm_mod_config_category</script_name>
        <sys_class_name>sys_ui_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2016-08-11 00:01:46</sys_created_on>
        <sys_id>abe144a30f4de2009ea83b8ce1050eba</sys_id>
        <sys_mod_count>4</sys_mod_count>
        <sys_name>x_xma_xmatters.xm_mod_config_category</sys_name>
        <sys_package display_value="xMatters" source="x_xma_xmatters">5950d7444f2231000e9fa88ca310c78c</sys_package>
        <sys_policy/>
        <sys_scope display_value="xMatters">5950d7444f2231000e9fa88ca310c78c</sys_scope>
        <sys_update_name>sys_ui_script_abe144a30f4de2009ea83b8ce1050eba</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2018-07-30 23:03:30</sys_updated_on>
        <ui_type>0</ui_type>
        <use_scoped_format>false</use_scoped_format>
    </sys_ui_script>
</record_update>
