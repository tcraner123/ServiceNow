<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_xma_xmatters.xMattersDataEvent</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>xMattersDataEvent</name>
        <script><![CDATA[gs.include('xMattersLogger');
gs.include('xMattersConfig');
gs.include('xMattersDataHelper');
gs.include('xMattersDevice');
gs.include('xMattersSite');
gs.include('xMattersPerson');
gs.include('xMattersPersonCollection');
gs.include('xMattersGroup');
gs.include('xMattersGroupCollection');
gs.include('xMattersGroupMembership');

var xMattersDataEvent = Class.create();
xMattersDataEvent.prototype = {
  initialize: function (config, logTraceId) {
    if (config && config.type == 'xMattersConfig') {
      this.config = config;
    } else {
      this.config = new xMattersConfig();
    }
    this.log = new xMattersLogger(this.config.DEBUGGING, 'xMattersDataEvent', logTraceId);
    this.numAvailableQueues = this.config.NUM_DATA_SYNC_QUEUES || 6;

    var prefix = gs.getCurrentScopeName(); // 'x_xma_xmatters'
    this.TYPE = {
      PERSON: 'PERSON',
      PEOPLE: 'PEOPLE',
      REMOVE_PERSON: 'REMOVE_PERSON',
      REMOVE_PEOPLE: 'REMOVE_PEOPLE',
      GROUP: 'GROUP',
      GROUPS: 'GROUPS',
      REMOVE_GROUP: 'REMOVE_GROUP',
      MEMBERSHIP: 'MEMBERSHIP',
      MEMBERSHIP_SYNC_AND_ADD: 'MEMBERSHIP_SYNC_AND_ADD',
      REMOVE_MEMBERSHIPS: 'REMOVE_MEMBERSHIPS'
    };
    this.QUEUE_NAME = prefix + '.data_sync.';
  },

  getChildLogTraceId: function () {
    var newLogger = new xMattersLogger();
    newLogger.setParentLogTraceId(this.log.getLogTraceId());
    return newLogger.getLogTraceId();
  },

  queueEvent: function (type, eventParameters, record) {
    // Process Event Parameters
    eventParameters.type = type;
    eventParameters.logTraceId = this.getChildLogTraceId();
    var paramStr = global.JSON.stringify(eventParameters);
    // Dynamically get the full queue name
    var queueNumber = Math.ceil(Math.random() * this.numAvailableQueues);
    var queueName = this.QUEUE_NAME + queueNumber;
    // Queue the event
    gs.eventQueue(queueName, record, type, paramStr, queueName);
  },
  
  processEvent: function (event) {
    if (!event.parm2) {
      this.log.error('DSE: Missing parm2 in event');
    }
    var parameters = new global.JSON().decode(event.parm2);
    this.log.setLogTraceId(parameters.logTraceId);
    var type = parameters.type;
    switch (type) {
      case this.TYPE.PERSON:
        this.handleSyncPersonEvent(event, parameters);
        break;
      case this.TYPE.REMOVE_PERSON:
        this.handleRemovePersonEvent(event, parameters);
        break;
      case this.TYPE.PEOPLE:
        this.handleSyncPeopleEvent(event, parameters);
        break;
      case this.TYPE.REMOVE_PEOPLE:
        this.handleRemovePeopleEvent(event, parameters);
        break;
      case this.TYPE.GROUP:
        this.handleSyncGroupEvent(event, parameters);
        break;
      case this.TYPE.REMOVE_GROUP:
        this.handleRemoveGroupEvent(event, parameters);
        break;
      case this.TYPE.GROUPS:
        this.handleSyncGroupsEvent(event, parameters);
        break;
      case this.TYPE.MEMBERSHIP:
        this.handleSyncMembershipEvent(event, parameters);
        break;
      case this.TYPE.MEMBERSHIP_SYNC_AND_ADD:
        this.handleSyncAndAddMembersEvent(event, parameters);
        break;
      case this.TYPE.REMOVE_MEMBERSHIPS:
        this.handleRemoveMembershipsEvent(event, parameters);
        break;
      default:
        this.log.error('DSE: Invalid type: ' + type + '; Parameters:' + event.parm2);
        break;
    }
  },
  
  queueSyncPersonEvent: function (userRec, username, oldUsername, args) {
    this.log.debug('DSE: Queueing Sync Person Event [' + username + ']');
    var eventParameters = {
      username: username,
      oldUsername: oldUsername,
      args: args
    };
    this.queueEvent(this.TYPE.PERSON, eventParameters, userRec);
  },

  handleSyncPersonEvent: function(event, parameters) {
    this.log.debug('DSE: Processing PERSON Event');
    var xmPerson = new xMattersPerson(this.config, null, this.log.getLogTraceId());
    var user = parameters.username;
    var previousUser = parameters.oldUsername;
    var args = parameters.args;
    xmPerson.syncUser(user, previousUser, args);
  },
  
  queueRemovePersonEvent: function (userRec, username) {
    this.log.debug('DSE: Queueing Remove Person Event [' + username + ']');
    var eventParameters = {
      username: username
    };
    this.queueEvent(this.TYPE.REMOVE_PERSON, eventParameters, null);
  },

  handleRemovePersonEvent: function(event, parameters) {
    this.log.debug('DSE: Processing REMOVE_PERSON Event');
    var xmPerson = new xMattersPerson(this.config, null, this.log.getLogTraceId());
    var user = parameters.username;
    xmPerson.removeUser(user);
  },
  
  queueSyncPeopleEvent: function (users, setExternalKey) {
    this.log.debug('DSE: Queueing Sync People Event [' + users + ']');
    var eventParameters = {
      users: users,
      setExternalKey: setExternalKey
    };
    this.queueEvent(this.TYPE.PEOPLE, eventParameters, null);
  },

  handleSyncPeopleEvent: function(event, parameters) {
    var users = parameters.users;
    var setExternalKey = parameters.setExternalKey;
    this.log.debug('DSE: Processing PEOPLE Event [' + users + ']');
    var xmPeople = new xMattersPersonCollection(this.config, null, this.log.getLogTraceId());
    xmPeople.syncUsers(users, setExternalKey);
  },
  
  queueRemovePeopleEvent: function (usernames) {
    this.log.debug('DSE: Queueing Sync People Event [' + usernames + ']');
    var eventParameters = {
      usernames: usernames
    };
    this.queueEvent(this.TYPE.REMOVE_PEOPLE, eventParameters, null);
  },

  handleRemovePeopleEvent: function(event, parameters) {
    this.log.debug('DSE: Processing PEOPLE Event');
    var xmPeople = new xMattersPersonCollection(this.config, null, this.log.getLogTraceId());
    var usernames = parameters.usernames;
    xmPeople.removeUsers(usernames);
  },
  
  queueSyncGroupEvent: function (groupRec, groupName, previousValues, shouldSyncMembership, shouldSetExternalKey) {
    this.log.debug('DSE: Queueing Sync Group Event [' + groupName + ']');
    var eventParameters = {
      groupName: groupName,
      previousValues: previousValues,
      shouldSyncMembership: shouldSyncMembership,
      shouldSetExternalKey: shouldSetExternalKey
    };
    this.queueEvent(this.TYPE.GROUP, eventParameters, groupRec);
  },

  handleSyncGroupEvent: function (event, parameters) {
    this.log.debug('DSE: Processing GROUP Event');
    var xmGroup = new xMattersGroup(this.config, null, this.log.getLogTraceId());
    var group = parameters.groupName;
    var previousValues = parameters.previousValues;
    var syncMembership = parameters.shouldSyncMembership;
    var setExternalKey = parameters.shouldSetExternalKey;
    xmGroup.syncGroup(group, previousValues, syncMembership, setExternalKey);
  },
  
  queueRemoveGroupEvent: function (groupRec, groupName) {
    this.log.debug('DSE: Queueing Remove Group Event [' + groupName + ']');
    var eventParameters = {
      groupName: groupName,
    };
    this.queueEvent(this.TYPE.REMOVE_GROUP, eventParameters, null);
  },

  handleRemoveGroupEvent: function (event, parameters) {
    this.log.debug('DSE: Processing REMOVE_GROUP Event');
    var xmGroup = new xMattersGroup(this.config, null, this.log.getLogTraceId());
    var group = parameters.groupName;
    xmGroup.removeGroup(group);
  },
  
  queueSyncGroupsEvent: function (groups, setExternalKey) {
    this.log.debug('DSE: Queueing Sync Groups Event [' + groups + ']');
    var eventParameters = {
      type: this.TYPE.GROUPS,
      groups: groups,
      setExternalKey: setExternalKey
    };
    this.queueEvent(this.TYPE.GROUPS, eventParameters, null);
  },

  handleSyncGroupsEvent: function (event, parameters) {
    this.log.debug('DSE: Processing GROUPS Event');
    var xmGroups = new xMattersGroupCollection(this.config, null, this.log.getLogTraceId());
    var groups = parameters.groups;
    var setExternalKey = parameters.setExternalKey;
    xmGroups.syncGroups(groups, setExternalKey);
  },
  
  queueSyncMembershipEvent: function (record, groupName, username) {
    var key =  groupName + '|' + username;
    this.log.debug('DSE: Queueing Sync Group Memberships Event [' + key + ']');
    var eventParameters = {
      groupName: groupName,
      username: username
    };
    this.queueEvent(this.TYPE.MEMBERSHIP, eventParameters, null);
  },

  handleSyncMembershipEvent: function (event, parameters) {
    this.log.debug('DSE: Processing MEMBERSHIP Event');
    var xmMembership = new xMattersGroupMembership(this.config, null, this.log.getLogTraceId());
    var group = parameters.groupName;
    var user = parameters.username;
    xmMembership.syncMembership(group, user);
  },
  
  queueSyncAndAddMembersEvent: function(users, groupName, shiftName, recipientType) {
    var key =  groupName + '|' + users;
    this.log.debug('DSE: Queueing Sync Many Group Memberships Event [' + key + ']');
    var eventParameters = {
      groupName: groupName,
      users: users,
      shiftName: shiftName,
      recipientType: recipientType
    };
    this.queueEvent(this.TYPE.MEMBERSHIP_SYNC_AND_ADD, eventParameters, null);
  },

  handleSyncAndAddMembersEvent: function (event, parameters) {
    this.log.debug('DSE: Processing MEMBERSHIPS Event');
    var xmMembership = new xMattersGroupMembership(this.config, null, this.log.getLogTraceId());
    var users = parameters.users;
    var groupName = parameters.groupName;
    var recipientType = parameters.recipientType;
    var shiftName = parameters.shiftName;
    xmMembership.syncAndAddMembers(users, groupName, recipientType, shiftName);
  },
  
  queueRemoveMembershipsEvent: function (members, groupName) {
    var key =  groupName + '|' + members;
    this.log.debug('DSE: Queueing Remove Group Memberships Event [' + key + ']');
    var eventParameters = {
      groupName: groupName,
      members: members
    };
    this.queueEvent(this.TYPE.REMOVE_MEMBERSHIPS, eventParameters, null);
  },

  handleRemoveMembershipsEvent: function (event, parameters) {
    this.log.debug('DSE: Processing REMOVE_MEMBERSHIPS Event');
    var groupName = parameters.groupName;
    var members = parameters.members;
    var xmMembership = new xMattersGroupMembership(this.config, null, this.log.getLogTraceId());
    xmMembership.removeMembers(groupName, members);
  },
  
  
  type: 'xMattersDataEvent'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2018-04-07 00:09:06</sys_created_on>
        <sys_id>cce36eb10f5d5380723148dce1050e2c</sys_id>
        <sys_mod_count>4</sys_mod_count>
        <sys_name>xMattersDataEvent</sys_name>
        <sys_package display_value="xMatters" source="x_xma_xmatters">5950d7444f2231000e9fa88ca310c78c</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="xMatters">5950d7444f2231000e9fa88ca310c78c</sys_scope>
        <sys_update_name>sys_script_include_cce36eb10f5d5380723148dce1050e2c</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2019-04-15 18:10:41</sys_updated_on>
    </sys_script_include>
</record_update>
