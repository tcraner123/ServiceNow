<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ui_script">
    <sys_ui_script action="INSERT_OR_UPDATE">
        <active>true</active>
        <description/>
        <global>false</global>
        <name>x_xma_xmatters.xm_mod_options_provider</name>
        <script><![CDATA[angular.module('xm.options-provider', [ 'xm.glide-ajax', 'xm.location-service' ])
    .service('OptionsProvider', function ( GlideAjax, LocationService ) {
        var options = {
            hosted_conference_bridges: [],
            external_conference_bridges: [],
            send_priorities: []
        };

        var buildOption = function( value, translationPrefix ) {
            return {
                value: value,
                label: (translationPrefix) ? translationPrefix + '.' + value : value
            };
        };

        options.send_priorities.push( buildOption('low', 'ENGAGE_XM.OPTIONS.SEND_PRIORITY') );
        options.send_priorities.push( buildOption('medium', 'ENGAGE_XM.OPTIONS.SEND_PRIORITY') );
        options.send_priorities.push( buildOption('high', 'ENGAGE_XM.OPTIONS.SEND_PRIORITY') );

        var buildActiveBridgeOption = function( bridge ) {
            return {
                value: bridge.bridgeId,
                label: bridge.bridgeId + ' - Started ' + moment(bridge.startTime).fromNow(),
            };
        };

        // xMatters hosted bridges
        options.hosted_conference_bridges.push( buildOption('Hosted_New', 'ENGAGE_XM.OPTIONS.CONFERENCE_BRIDGE') );

        var activeBridges = new GlideAjax( 'xMattersAjaxEngage' );
        activeBridges.addParam( 'sysparm_name', 'getActiveHostedConferenceBridges' );
        activeBridges.addParam( 'incident_id', LocationService.searchParams.incident_id);
        activeBridges.send().then( function( resp ) {
            if( resp && resp.success &&  resp.data && Array.isArray(resp.data)) {
                for (var i = 0; i < resp.data.length ; i++) {
                    options.hosted_conference_bridges.push(buildActiveBridgeOption(resp.data[i]));
                }
            }
        });

        // External bridges
        var retrieveBridges = new GlideAjax( 'xMattersAjaxEngage' );
        retrieveBridges.addParam( 'sysparm_name', 'getExternalConferenceBridges' );
        retrieveBridges.send().then( function( resp ){
            if( resp.success ) {
                var confBridges = resp.data.split( ';' );
                for( var i = 0; i < confBridges.length; i++ ) {
                    if( confBridges[i].trim().length > 0 ) {
                        options.external_conference_bridges.push( buildOption( confBridges[i].trim() ) );
                    }
                }
            }
        } );

        return options;
    });
]]></script>
        <script_name>xm_mod_options_provider</script_name>
        <sys_class_name>sys_ui_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2016-07-12 15:04:39</sys_created_on>
        <sys_id>d7e030024f6c220078bae321a310c799</sys_id>
        <sys_mod_count>7</sys_mod_count>
        <sys_name>x_xma_xmatters.xm_mod_options_provider</sys_name>
        <sys_package display_value="xMatters" source="x_xma_xmatters">5950d7444f2231000e9fa88ca310c78c</sys_package>
        <sys_policy/>
        <sys_scope display_value="xMatters">5950d7444f2231000e9fa88ca310c78c</sys_scope>
        <sys_update_name>sys_ui_script_d7e030024f6c220078bae321a310c799</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2019-04-15 18:10:41</sys_updated_on>
        <ui_type>0</ui_type>
        <use_scoped_format>false</use_scoped_format>
    </sys_ui_script>
</record_update>
