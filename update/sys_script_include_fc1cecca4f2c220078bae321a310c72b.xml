<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_xma_xmatters.xMattersConfig</api_name>
        <client_callable>false</client_callable>
        <description/>
        <name>xMattersConfig</name>
        <script><![CDATA[/**
 * Configured settings for xMatters integration
 * @type {Object}
 */
var xMattersConfig = Class.create();

xMattersConfig.prototype = {

    initialize: function () {
        var prefix = gs.getCurrentScopeName(); // 'x_xma_xmatters'

        this.SNAPI = {
            hostname: gs.getProperty('glide.servlet.uri'),
            password: gs.getProperty(prefix + '.xmatters.api.password'),
            user: gs.getProperty(prefix + '.xmatters.api.user')
        };

        this.XMAPI = {
            hostname: gs.getProperty(prefix + '.xmatters.reb.hostname'),
            password: gs.getProperty(prefix + '.xmatters.reb.password'),
            user: gs.getProperty(prefix + '.xmatters.reb.user'),
            baseURL: '/api/xm/1'
        };

        this.MID_SERVER_ENABLED = gs.getProperty(prefix + '.xmatters.mid.server.enabled') == 'true';
        this.MID_SERVER_NAME = gs.getProperty(prefix + '.xmatters.mid.server.name');

        this.INCIDENT = {
            ENABLED: gs.getProperty(prefix + '.xmatters.incident.enable') == 'true',
            FORM: gs.getProperty(prefix + '.xmatters.reb.incident.endpoint'),
            RESPONSES: {
                INDIVIDUAL: gs.getProperty(prefix + '.xmatters.reb.incident.individual.responses'),
                GROUP: gs.getProperty(prefix + '.xmatters.reb.incident.group.responses')
            },
            VALID_PRIORITIES: gs.getProperty(prefix + '.xmatters.incident.priority'),
            INACTIVE_STATES: '6,7',
            CRITICAL_PRIORITY: '1 - Critical', 
            EVENT_QUEUE_BASE: prefix + '.incident.action',
            TRIGGER_RULES: {
                ASSIGNMENT: 'Assignment',
                PRIORITY_UPGRADE: 'Priority Upgrade',
                SLA_ALERT: 'SLA Alert',
                REOPENED: 'Reopened',
                DELETE: 'Delete'
            },
            // if true, events will be sent with the "configuration_item_list" property set
            // ensure that Incident Properties have been synced before setting to true
            SEND_CONFIGURATION_ITEM_LIST: false,
            // if true, incidents will be suppressed when assigning to self
            SUPPRESS_ASSIGN_SELF: true,
            // if true, incidents will be suppressed when unable to find a Recipient
            SUPPRESS_NO_RECIPIENT: false,
            // if true, incidents will only be sent to users/groups who are synced to xMatters
            SEND_TO_SYNCED_ONLY: true
        };

        this.PRIORITY = {
            HIGH: 'high',
            MEDIUM: 'medium',
            LOW: 'low'
        };

        this.ENGAGE = {
            ENABLED: gs.getProperty(prefix + '.xmatters.task.enable' ) == 'true',
            FORM: {
                CONFERENCE: gs.getProperty(prefix + '.xmatters.reb.task.conference.endpoint' ),
                ENGAGE: gs.getProperty( prefix + '.xmatters.reb.task.endpoint' )
            },
			EXTERNAL_BRIDGES: gs.getProperty(prefix + '.xmatters.task.conference.bridges' )
        };

        this.EVENTS = {
            LANGUAGE: gs.getProperty(prefix + '.xmatters.reb.events.language'),
            MAX_ATTEMPTS: 3,
            MAX_FIELD_LENGTH: 2000
        };

        this.DEBUGGING = gs.getProperty(prefix + '.xmatters.debugging.enabled') ==  'true';

        // number of attempts to retry failing requests (if a "500 internal server error" occurs)
        this.MAX_REQUEST_ATTEMPTS = gs.getProperty(prefix + '.xmatters.max.request.attempts');
        this.MAX_REQUEST_ATTEMPTS = this.MAX_REQUEST_ATTEMPTS || 3;

        /*
         * Set the RESTMessageV2 log level to use in xMattersDataHelper
         *
         * Replace the following to customize the logging level for outbound
         * REST calls. Valid values are: 'basic', 'elevated' and 'all'.
         */
        this.REST_LOGLEVEL = 'elevated';
        if (this.DEBUGGING) {
            this.REST_LOGLEVEL = 'all';
        }

        this.ALLOWDUPLICATES = gs.getProperty(prefix + '.xmatters.group.sync.allow.duplicates');
        this.DEFAULTSUPERVISOR = gs.getProperty(prefix + '.xmatters.sync.supervisor');
        this.SYNC_MANAGERS = gs.getProperty(prefix + '.xmatters.sync.managers') == 'true';
        this.DEFAULTTMEZONE = gs.getProperty(prefix + '.xmatters.sync.time.zone');

        // historically, default delimiter was semi-colon but now is comma with new config page
        this.DEFAULTUSERROLES = gs.getProperty(prefix + '.xmatters.user.sync.role').split(/[;,]+/);
        this.ROLE_GROUP_SUPERVISOR = gs.getProperty(prefix + '.xmatters.role.group.supervisor');
        this.ROLE_PERSON_SUPERVISOR = gs.getProperty(prefix + '.xmatters.role.person.supervisor');

        this.EXTERNALLYOWNED = gs.getProperty(prefix + '.xmatters.sync.externally.owned');
        this.OBSERVEDBYALL = true;
        this.SHIFTNAME = '24x7';
        this.SITE = gs.getProperty(prefix + '.xmatters.sync.site');
        this.SYNCABLEROLES = gs.getProperty(prefix + '.xmatters.sync.roles.list').split(';');
        this.USEDEFAULTDEVICES = gs.getProperty(prefix + '.xmatters.group.sync.use.default.devices');
        this.USERNAMEFIELD = 'user_name';

        this.SYNC_DYNAMICALLY = gs.getProperty(prefix + '.xmatters.sync.dynamically') == 'true';

        this.DEVICE_PROVIDERS = {
            EMAIL: gs.getProperty(prefix + '.xmatters.user.sync.email.service.provider'),
            VOICE: gs.getProperty(prefix + '.xmatters.user.sync.phone.service.provider'),
            TEXT_PHONE: gs.getProperty(prefix + '.xmatters.user.sync.sms.service.provider')
        };
        this.EMAILDEVICE = gs.getProperty(prefix + '.xmatters.user.sync.email.device.name');
        this.PHONEDEVICE = gs.getProperty(prefix + '.xmatters.user.sync.work.phone.device.name');
        this.MOBILEDEVICE = gs.getProperty(prefix + '.xmatters.user.sync.mobile.phone.device.name');
        this.SMSDEVICE = gs.getProperty(prefix + '.xmatters.user.sync.sms.device.name');
        this.EXTENSION_IDENTIFIER = gs.getProperty(prefix + '.xmatters.user.sync.phone.extension.identifier');

        // configuration items
        this.CI_LIST_UUID = gs.getProperty(prefix + '.xmatters.sync.configurationitem.list.UUID');
        this.CI_QUERY = gs.getProperty(prefix + '.xmatters.sync.configurationitem.query');

        /*
         * Batch syncing pseudo-constants
         */
        // Set to 0 or negative to use as many processes as possible (1 process per 8-9 users)
        this.MAX_USER_PROCESSES = -1;

        // The 'Background max events, jobs, etc limits' Quota
        // only allows 100 HTTP calls per process. Geneva
        // seems to have a lower threshold.
        this.MAX_CALLS_PER_PROCESS = 40;

        // the max API calls for each of these
        this.CALLS_PER_USER = 8;
        this.CALLS_PER_USER_DELETE = 2;
        this.CALLS_PER_GROUP = 10;
        this.CALLS_PER_MEMBER_DELETE = 1;
		
		this.USE_PROGRESS_WORKERS = false;
		this.NUM_DATA_SYNC_QUEUES = 6;
    },

    type: 'xMattersConfig'
};
]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2016-07-12 14:43:34</sys_created_on>
        <sys_id>fc1cecca4f2c220078bae321a310c72b</sys_id>
        <sys_mod_count>29</sys_mod_count>
        <sys_name>xMattersConfig</sys_name>
        <sys_package display_value="xMatters" source="x_xma_xmatters">5950d7444f2231000e9fa88ca310c78c</sys_package>
        <sys_policy/>
        <sys_scope display_value="xMatters">5950d7444f2231000e9fa88ca310c78c</sys_scope>
        <sys_update_name>sys_script_include_fc1cecca4f2c220078bae321a310c72b</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2018-04-06 19:35:58</sys_updated_on>
    </sys_script_include>
</record_update>
