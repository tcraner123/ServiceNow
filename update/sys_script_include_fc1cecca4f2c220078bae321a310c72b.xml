<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_xma_xmatters.xMattersConfig</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>xMattersConfig</name>
        <script><![CDATA[/**
 * Configured settings for xMatters integration
 * @type {Object}
 */
var xMattersConfig = Class.create();

xMattersConfig.prototype = {

    initialize: function () {
        var prefix = gs.getCurrentScopeName(); // 'x_xma_xmatters'

        this.SNAPI = {
            hostname: gs.getProperty('glide.servlet.uri'),
            password: gs.getProperty(prefix + '.xmatters.api.password'),
            user: gs.getProperty(prefix + '.xmatters.api.user')
        };

        this.XMAPI = {
            hostname: gs.getProperty(prefix + '.xmatters.reb.hostname').replace(/\/$/, ''),
            password: gs.getProperty(prefix + '.xmatters.reb.password'),
            user: gs.getProperty(prefix + '.xmatters.reb.user'),
            baseURL: '/api/xm/1'
        };

        this.MID_SERVER_ENABLED = gs.getProperty(prefix + '.xmatters.mid.server.enabled') == 'true';
        this.MID_SERVER_NAME = gs.getProperty(prefix + '.xmatters.mid.server.name');

        this.INCIDENT = {
            ENABLED: gs.getProperty(prefix + '.xmatters.incident.enable') == 'true',
            FORM: gs.getProperty(prefix + '.xmatters.reb.incident.endpoint'),
            RESPONSES: {
                INDIVIDUAL: gs.getProperty(prefix + '.xmatters.reb.incident.individual.responses'),
                GROUP: gs.getProperty(prefix + '.xmatters.reb.incident.group.responses')
            },
            VALID_PRIORITIES: gs.getProperty(prefix + '.xmatters.incident.priority'),
            INACTIVE_STATES: gs.getProperty(prefix + '.xmatters.incident.inactivestates'),
            CRITICAL_PRIORITY: gs.getProperty(prefix + '.xmatters.incident.criticalpriority'), 
            EVENT_QUEUE_BASE: prefix + gs.getProperty(prefix + '.xmatters.incident.queue.suffix'),
            TRIGGER_RULES: {
                ASSIGNMENT: gs.getProperty(prefix + '.xmatters.incident.trigger.assignment'),
                PRIORITY_UPGRADE: gs.getProperty(prefix + '.xmatters.incident.trigger.priorityupgrade'),
                SLA_ALERT: gs.getProperty(prefix + '.xmatters.incident.trigger.slaalert'),
                REOPENED: gs.getProperty(prefix + '.xmatters.incident.trigger.reopened'),
                DELETE: gs.getProperty(prefix + '.xmatters.incident.trigger.delete')
            },
            SEND_CONFIGURATION_ITEM_LIST: gs.getProperty(prefix + '.xmatters.incident.sendconfigurationitemlist') == 'true',
            SUPPRESS_ASSIGN_SELF: gs.getProperty(prefix + '.xmatters.incident.suppressassignself') == 'true',
            SUPPRESS_NO_RECIPIENT: gs.getProperty(prefix + '.xmatters.incident.suppressnorecipient') == 'true',
            SEND_TO_SYNCED_ONLY: gs.getProperty(prefix + '.xmatters.incident.sendtosyncedonly') == 'true'
        };

        this.PRIORITY = {
            HIGH: gs.getProperty(prefix + '.xmatters.priority.high'),
            MEDIUM: gs.getProperty(prefix + '.xmatters.priority.medium'),
            LOW: gs.getProperty(prefix + '.xmatters.priority.low')
        };

        this.ENGAGE = {
            MAX_RECIPIENT_RESULTS: parseInt(gs.getProperty(prefix + '.xmatters.reb.engage.maxrecipientresults')),
            ENABLED: gs.getProperty(prefix + '.xmatters.task.enable') == 'true',
            FORM: {
                CONFERENCE: gs.getProperty(prefix + '.xmatters.reb.task.conference.endpoint'),
                ENGAGE: gs.getProperty(prefix + '.xmatters.reb.task.endpoint')
            },
            EXTERNAL_BRIDGES: gs.getProperty(prefix + '.xmatters.task.conference.bridges')
        };

        this.EVENTS = {
            LANGUAGE: gs.getProperty(prefix + '.xmatters.reb.events.language'),
            MAX_ATTEMPTS: parseInt(gs.getProperty(prefix + '.xmatters.events.maxattempts'), 10),
            MAX_FIELD_LENGTH: parseInt(gs.getProperty(prefix + '.xmatters.events.maxfieldlength'), 10)
        };

        this.DEBUGGING = gs.getProperty(prefix + '.xmatters.debugging.enabled') ==  'true';

        // number of attempts to retry failing requests (if a "500 internal server error" occurs)
        this.MAX_REQUEST_ATTEMPTS = gs.getProperty(prefix + '.xmatters.max.request.attempts');
        this.MAX_REQUEST_ATTEMPTS = this.MAX_REQUEST_ATTEMPTS || 3;
        // default rest request timeout in seconds for the Data Helper Script Include -- defaults to 60 seconds
        this.REST_REQUEST_TIMEOUT_SECONDS = parseInt(gs.getProperty(prefix +'.xmatters.request.timeout.seconds'), 10) || 60;

        /*
         * Set the RESTMessageV2 log level to use in xMattersDataHelper
         *
         * Replace the following to customize the logging level for outbound
         * REST calls. Valid values are: 'basic', 'elevated' and 'all'.
         */
        this.REST_LOGLEVEL = gs.getProperty(prefix + '.xmatters.loglevel.rest.normal');
        if (this.DEBUGGING) {
            this.REST_LOGLEVEL = gs.getProperty(prefix + '.xmatters.loglevel.rest.debugging');
        }

        this.ALLOWDUPLICATES = gs.getProperty(prefix + '.xmatters.group.sync.allow.duplicates');
        this.DEFAULTSUPERVISOR = gs.getProperty(prefix + '.xmatters.sync.supervisor');
        this.SYNC_MANAGERS = gs.getProperty(prefix + '.xmatters.sync.managers') == 'true';
        this.DEFAULTTMEZONE = gs.getProperty(prefix + '.xmatters.sync.time.zone');

        // historically, default delimiter was semi-colon but now is comma with new config page
        this.DEFAULTUSERROLES = gs.getProperty(prefix + '.xmatters.user.sync.role').split(/[;,]+/);
        this.ROLE_GROUP_SUPERVISOR = gs.getProperty(prefix + '.xmatters.role.group.supervisor');
        this.ROLE_PERSON_SUPERVISOR = gs.getProperty(prefix + '.xmatters.role.person.supervisor');

        this.EXTERNALLYOWNED = gs.getProperty(prefix + '.xmatters.sync.externally.owned');
        this.OBSERVEDBYALL = gs.getProperty(prefix + '.xmatters.group.sync.observedbyall') == 'true';
        this.SHIFTNAME = gs.getProperty(prefix + '.xmatters.group.sync.shiftname');
        this.SITE = gs.getProperty(prefix + '.xmatters.sync.site');
        this.SYNCABLEROLES = gs.getProperty(prefix + '.xmatters.sync.roles.list').split(';');
        this.USEDEFAULTDEVICES = gs.getProperty(prefix + '.xmatters.group.sync.use.default.devices');
        this.USERNAMEFIELD = gs.getProperty(prefix + '.xmatters.user.sync.usernamefield');
        
        this.SYNC_DYNAMICALLY = gs.getProperty(prefix + '.xmatters.sync.dynamically') == 'true';

        this.DEVICE_PROVIDERS = {
            EMAIL: gs.getProperty(prefix + '.xmatters.user.sync.email.service.provider'),
            VOICE: gs.getProperty(prefix + '.xmatters.user.sync.phone.service.provider'),
            TEXT_PHONE: gs.getProperty(prefix + '.xmatters.user.sync.sms.service.provider')
        };
        this.EMAILDEVICE = gs.getProperty(prefix + '.xmatters.user.sync.email.device.name');
        this.PHONEDEVICE = gs.getProperty(prefix + '.xmatters.user.sync.work.phone.device.name');
        this.MOBILEDEVICE = gs.getProperty(prefix + '.xmatters.user.sync.mobile.phone.device.name');
        this.SMSDEVICE = gs.getProperty(prefix + '.xmatters.user.sync.sms.device.name');
        this.EXTENSION_IDENTIFIER = gs.getProperty(prefix + '.xmatters.user.sync.phone.extension.identifier');

        // configuration items
        this.CI_LIST_UUID = gs.getProperty(prefix + '.xmatters.sync.configurationitem.list.UUID');
        this.CI_QUERY = gs.getProperty(prefix + '.xmatters.sync.configurationitem.query');

        /*
         * Batch syncing pseudo-constants
         */
        // Set to 0 or negative to use as many processes as possible (1 process per 8-9 users)
        this.MAX_USER_PROCESSES = parseInt(gs.getProperty(prefix + '.xmatters.sync.maxuserprocesses'), 10);

        // The 'Background max events, jobs, etc limits' Quota
        // only allows 100 HTTP calls per process. Geneva
        // seems to have a lower threshold.
        this.MAX_CALLS_PER_PROCESS = parseInt(gs.getProperty(prefix + '.xmatters.sync.calls.maxperprocess'), 10);

        // the max API calls for each of these
        this.CALLS_PER_USER = parseInt(gs.getProperty(prefix + '.xmatters.sync.calls.peruser'), 10);
        this.CALLS_PER_USER_DELETE = parseInt(gs.getProperty(prefix + '.xmatters.sync.calls.peruserdelete'), 10);
        this.CALLS_PER_GROUP = parseInt(gs.getProperty(prefix + '.xmatters.sync.calls.pergroup'), 10);
        this.CALLS_PER_MEMBER_DELETE = parseInt(gs.getProperty(prefix + '.xmatters.sync.calls.permemberdelete'), 10);
        
        this.USE_PROGRESS_WORKERS = gs.getProperty(prefix + '.xmatters.sync.useprogressworkers') == 'true';
        this.NUM_DATA_SYNC_QUEUES = parseInt(gs.getProperty(prefix + '.xmatters.sync.numqueues'), 10);
    },

    type: 'xMattersConfig'
};
]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2016-07-12 14:43:34</sys_created_on>
        <sys_id>fc1cecca4f2c220078bae321a310c72b</sys_id>
        <sys_mod_count>33</sys_mod_count>
        <sys_name>xMattersConfig</sys_name>
        <sys_package display_value="xMatters" source="x_xma_xmatters">5950d7444f2231000e9fa88ca310c78c</sys_package>
        <sys_policy/>
        <sys_scope display_value="xMatters">5950d7444f2231000e9fa88ca310c78c</sys_scope>
        <sys_update_name>sys_script_include_fc1cecca4f2c220078bae321a310c72b</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2019-08-21 21:27:34</sys_updated_on>
    </sys_script_include>
</record_update>
