<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_xma_xmatters.xMattersInform</api_name>
        <client_callable>false</client_callable>
        <description/>
        <name>xMattersInform</name>
        <script><![CDATA[gs.include("xMattersLogger");
gs.include("xMattersConfigExtended");
gs.include("xMattersDataHelper");
gs.include("xMattersEventExtended");

var xMattersInform = Class.create();

xMattersInform.prototype = {
	
  initialize : function( config, dataHelper ) {
    if ( config )
        this.config = config;
    else 
        this.config = new xMattersConfigExtended();

    this.log = new xMattersLogger( this.config.LOGLEVEL, 'xMattersInform' );

    if ( dataHelper ) {
        this.dataHelper = dataHelper;
    } else {
        this.dataHelper = new xMattersDataHelper();
    }
    this.json = new global.JSON();
  },
  
  /**
  * @param rec current record
  * @param triggerRule String containing the trigger rule
  */
  sendInform : function( rec ) {

    var xMEvent = new xMattersEventExtended( this.config );

    var parentIncident = new GlideRecord( 'incident' );
    parentIncident.get( rec.parent_incident );
    xMEvent.addAllIncidentProperties( parentIncident );

    xMEvent.addProperty( 'business_impact', rec.business_impact );
    xMEvent.addProperty( 'first_reported',  rec.first_reported );
    xMEvent.addProperty( 'locations',       rec.locations );
    xMEvent.addProperty( 'services',        rec.services );
    xMEvent.addProperty( 'update',          rec.getValue( 'update' ) ); // GlideRecords have a function called update
    xMEvent.addProperty( 'update_type',     rec.update_type );
    xMEvent.addProperty( 'inform_number',   rec.number );
  	xMEvent.addProperty( 'inform_record_sysid', rec.sys_id );

    xMEvent.addRecipient( 'dummy' );


    xMEvent.setWebserviceURL( this.config.INFORM.FORM );

    var resp = xMEvent.send();
    this.log.debug( 'Resp: ' + resp );
	  
  },

  /**
  * Terminates an incident in the xMatters (alarmpoint) Engine
  * @param rec current rec
  */
  terminateInform : function( rec ) {
    // Terminate the related events in xMatters
    try {
      (new xMattersEventExtended( this.config, this.dataHelper ) ).terminateEvents( 'inform_number', String( rec.number ) );
      return "[xMatters] - Terminated existing events for this Inform record";
    } catch (e) {
      return "[xMatters] - Termination of events failed: " + this.json.encoe( e );
    }
  }
};

]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2017-03-07 18:10:53</sys_created_on>
        <sys_id>d5e50ba2dbd1b200a34fd421cf961962</sys_id>
        <sys_mod_count>9</sys_mod_count>
        <sys_name>xMattersInform</sys_name>
        <sys_package display_value="xMatters" source="x_xma_xmatters">5950d7444f2231000e9fa88ca310c78c</sys_package>
        <sys_policy/>
        <sys_scope display_value="xMatters">5950d7444f2231000e9fa88ca310c78c</sys_scope>
        <sys_update_name>sys_script_include_d5e50ba2dbd1b200a34fd421cf961962</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2017-03-08 19:36:10</sys_updated_on>
    </sys_script_include>
</record_update>
